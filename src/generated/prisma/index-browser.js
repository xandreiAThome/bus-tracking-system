
/* !!! This is code generated by Prisma. Do not edit directly. !!!
/* eslint-disable */

Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal,
  objectEnumValues,
  makeStrictEnum,
  Public,
  getRuntime,
  skip
} = require('./runtime/index-browser.js')


const Prisma = {}

exports.Prisma = Prisma
exports.$Enums = {}

/**
 * Prisma Client JS version: 6.13.0
 * Query Engine version: 361e86d0ea4987e9f53a565309b3eed797a6bcbd
 */
Prisma.prismaVersion = {
  client: "6.13.0",
  engine: "361e86d0ea4987e9f53a565309b3eed797a6bcbd"
}

Prisma.PrismaClientKnownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientKnownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientUnknownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientRustPanicError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientRustPanicError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientInitializationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientInitializationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientValidationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientValidationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`sqltag is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.empty = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`empty is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.join = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`join is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.raw = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`raw is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.getExtensionContext is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.defineExtension = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.defineExtension is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}



/**
 * Enums
 */

exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable'
});

exports.Prisma.Baggage_ticketScalarFieldEnum = {
  id: 'id',
  sender_no: 'sender_no',
  dispatcher_no: 'dispatcher_no',
  sender_name: 'sender_name',
  receiver_name: 'receiver_name',
  item: 'item',
  ticket_id: 'ticket_id'
};

exports.Prisma.BusScalarFieldEnum = {
  id: 'id',
  plate_number: 'plate_number',
  capacity: 'capacity',
  station_id: 'station_id'
};

exports.Prisma.CashierScalarFieldEnum = {
  id: 'id',
  shift_start: 'shift_start',
  shift_end: 'shift_end',
  station_id: 'station_id',
  user_id: 'user_id',
  last_name: 'last_name',
  first_name: 'first_name'
};

exports.Prisma.DriverScalarFieldEnum = {
  id: 'id',
  first_name: 'first_name',
  last_name: 'last_name',
  user_id: 'user_id'
};

exports.Prisma.Passenger_ticketScalarFieldEnum = {
  id: 'id',
  passenger_name: 'passenger_name',
  discount: 'discount',
  ticket_id: 'ticket_id'
};

exports.Prisma.SeatScalarFieldEnum = {
  id: 'id',
  seat_number: 'seat_number',
  bus_id: 'bus_id',
  status: 'status'
};

exports.Prisma.StationScalarFieldEnum = {
  id: 'id',
  name: 'name'
};

exports.Prisma.TicketScalarFieldEnum = {
  id: 'id',
  price: 'price',
  trip_id: 'trip_id',
  cashier_id: 'cashier_id',
  ticket_type: 'ticket_type',
  seat_id: 'seat_id',
  createdAt: 'createdAt'
};

exports.Prisma.TripScalarFieldEnum = {
  id: 'id',
  start_time: 'start_time',
  end_time: 'end_time',
  dest_station_id: 'dest_station_id',
  src_station_id: 'src_station_id',
  bus_id: 'bus_id',
  driver_id: 'driver_id',
  status: 'status'
};

exports.Prisma.UserScalarFieldEnum = {
  id: 'id',
  name: 'name',
  email: 'email',
  image: 'image',
  role: 'role'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.NullsOrder = {
  first: 'first',
  last: 'last'
};

exports.Prisma.baggage_ticketOrderByRelevanceFieldEnum = {
  sender_no: 'sender_no',
  dispatcher_no: 'dispatcher_no',
  sender_name: 'sender_name',
  receiver_name: 'receiver_name',
  item: 'item'
};

exports.Prisma.busOrderByRelevanceFieldEnum = {
  plate_number: 'plate_number'
};

exports.Prisma.cashierOrderByRelevanceFieldEnum = {
  last_name: 'last_name',
  first_name: 'first_name'
};

exports.Prisma.driverOrderByRelevanceFieldEnum = {
  first_name: 'first_name',
  last_name: 'last_name'
};

exports.Prisma.passenger_ticketOrderByRelevanceFieldEnum = {
  passenger_name: 'passenger_name'
};

exports.Prisma.seatOrderByRelevanceFieldEnum = {
  seat_number: 'seat_number'
};

exports.Prisma.stationOrderByRelevanceFieldEnum = {
  name: 'name'
};

exports.Prisma.userOrderByRelevanceFieldEnum = {
  name: 'name',
  email: 'email',
  image: 'image'
};
exports.passenger_ticket_discount = exports.$Enums.passenger_ticket_discount = {
  student: 'student',
  pwd: 'pwd',
  senior: 'senior'
};

exports.seat_status = exports.$Enums.seat_status = {
  available: 'available',
  occupied: 'occupied'
};

exports.ticket_ticket_type = exports.$Enums.ticket_ticket_type = {
  passenger: 'passenger',
  baggage: 'baggage'
};

exports.trip_status = exports.$Enums.trip_status = {
  boarding: 'boarding',
  transit: 'transit',
  complete: 'complete'
};

exports.user_role = exports.$Enums.user_role = {
  user: 'user',
  admin: 'admin',
  cashier: 'cashier',
  driver: 'driver'
};

exports.Prisma.ModelName = {
  baggage_ticket: 'baggage_ticket',
  bus: 'bus',
  cashier: 'cashier',
  driver: 'driver',
  passenger_ticket: 'passenger_ticket',
  seat: 'seat',
  station: 'station',
  ticket: 'ticket',
  trip: 'trip',
  user: 'user'
};

/**
 * This is a stub Prisma Client that will error at runtime if called.
 */
class PrismaClient {
  constructor() {
    return new Proxy(this, {
      get(target, prop) {
        let message
        const runtime = getRuntime()
        if (runtime.isEdge) {
          message = `PrismaClient is not configured to run in ${runtime.prettyName}. In order to run Prisma Client on edge runtime, either:
- Use Prisma Accelerate: https://pris.ly/d/accelerate
- Use Driver Adapters: https://pris.ly/d/driver-adapters
`;
        } else {
          message = 'PrismaClient is unable to run in this browser environment, or has been bundled for the browser (running in `' + runtime.prettyName + '`).'
        }

        message += `
If this is unexpected, please open an issue: https://pris.ly/prisma-prisma-bug-report`

        throw new Error(message)
      }
    })
  }
}

exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
